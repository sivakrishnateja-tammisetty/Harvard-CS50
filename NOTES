                                                          *Lecture 0- scratch


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                           *Lecture 1- C( string.h, ctype.h,strlen(), loops, decision-making statements)

>>in cscode.io ==>file creating[code filename.c] & compilation[make execute_file] and execute [./execute_file]

>> #include<ctype.h> ==> islower(), isupper(),toupper(),tolower()
>>Debugger
>>



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                            *Lecture 2-Arrays

>>  Array of strings and command line arguments.
>>Here we learend cowsay,cowsay is a program that generates ASCII art pictures through pictures. eg: cowsay mee & we can use different animal also like cowsay -f  duck bakk.


$ cowsay hello
 _______
< hello >
 -------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||
$ cowsay sri
 _____
< sri >
 -----
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||
$ cowsay -f duck bakk
 ______
< bakk >
 ------
 \
  \
   \ >()_
      (__)__ _

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                             *Lecture 3-Algorithms

*Linear search- O(n)

*Binary search -O(logn)

*Analazing algorithms formuales is(order was worst to best):
 O(n^2)
 O(nlogn)
 O(n)
 O(logn)
 O(1) 


Big O nataion (O)- Defines upper bound and lower bound should take same amount of time.
Big Omega notation (Ω): It is define as lower bound and lower bound on an algorithm is the least amount of time required ( the most efficient way possible, in other words best case).
Big Theta notation (Θ) : It is define as tightest bound and tightest bound is the best of all the worst case times that the algorithm can take.
* typedef

Eg: for multiple datatypes
#include <iostream>
using namespace std;
typedef struct
{
    string name;
    string num;
}person;
int main() {
   person people[2];
   people[0].name="siva";
   people[0].num="879273382";
   people[1].name="Krishna";
   people[1].num="2232134";
   string s;
   cout<<"enter your name to find:";
   getline(cin,s);
   for(int i=0;i<2;i++)
   {
       if(people[i].name==s)
       {
           cout<<"found "<<people[i].num;
           return 0;
       }
   }
   cout<<"Not found";
 

    return 0;
}





*selection sort  O(n^2)/omega(n^2):
          For i  from 0 to n-1
          find smallest from numbers[i] to numbers[n-1].
          swap smallest number with numbers[i].

*Bubble sort O(n):
 Repeat n times
 for i from 0 to n-2
 if numbers[i]  and numbers[i+1] out of order
 swapp them





*Recursion 


*merge sort O(n log n):
      If only one number
        quit
      Else
        sort left half of numbers
        sort right half of numbers
        Merge sorted halves


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                                         LECTURE 4- MEMORY

*Bit map- it map is a type of image and it's a map of bits.
* & and * operators .
* %p specifier is used to print address of a variable in hexadecimal format.
*Pointers
*pointer Arithmetic
* == vs strcmp ==> while comparing two strings,because == compares two memory address instead of character by character .
*malloc
*free
*valgrind:
          Valgrind is an open-source programming tool suite that is used for memory debugging, memory leak detection, and profiling. 
          It is widely used in the C and C++ programming communities to identify memory-related issues and improve the robustness of software applications.

          valgrind --tool=memcheck ./your_program   (or) valgrind ./prgm

*writing data into csv file(fopen,fprintf(file,"format specifier",variables,...))

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                    LECTURE -ALGORITHMS


